// Import the Task namespace types
include "tcrm_task.fbs";

namespace TCRM.Monitor;

// Error types

table ConfigParseError {
  message: string (required);
}

table CircularDependencyError {
  task_name: string (required);
}

table DependencyNotFoundError {
  dependency_task_name: string (required);
  task_name: string (required);
}

enum SendStdinErrorReason: byte {
  TaskNotFound = 0,
  StdinNotEnabled = 1,
  TaskNotActive = 2,
  ChannelClosed = 3
}

table ControlCommandError {
  terminate_all_tasks_reason: string;
  terminate_task_name: string;
  terminate_task_reason: string;
  send_stdin_task_name: string;
  send_stdin_input: string;
  send_stdin_reason: SendStdinErrorReason;
}

union TaskMonitorError {
  ConfigParse: ConfigParseError,
  CircularDependency: CircularDependencyError,
  DependencyNotFound: DependencyNotFoundError,
  ControlError: ControlCommandError
}

// Control Command Types

table TerminateAllTasksCommand {
  reason: string (required);
}

table TerminateTaskCommand {
  task_name: string (required);
  reason: string (required);
}

table SendStdinCommand {
  task_name: string (required);
  input: string (required);
}

union TaskMonitorControlCommand {
  TerminateAllTasks: TerminateAllTasksCommand,
  TerminateTask: TerminateTaskCommand,
  SendStdin: SendStdinCommand
}

// Control Event Types

table ControlReceivedEvent {
  control: TaskMonitorControlCommand (required);
}

table ControlProcessedEvent {
  control: TaskMonitorControlCommand (required);
}

union TaskMonitorControlEvent {
  ControlReceived: ControlReceivedEvent,
  ControlProcessed: ControlProcessedEvent
}

table TaskMonitorControlEventWrapper {
  control_event: TaskMonitorControlEvent (required);
}

// Monitor Events

table ExecutionStartedEvent {
  total_tasks: uint64;
}

table ExecutionCompletedEvent {
  completed_tasks: uint64;
  failed_tasks: uint64;
}

table TaskMonitorErrorWrapper {
  error: TaskMonitorError (required);
}

union TaskMonitorEvent {
  Task: TCRM.Task.TaskEvent,
  Started: ExecutionStartedEvent,
  Completed: ExecutionCompletedEvent,
  Control: TaskMonitorControlEventWrapper,
  Error: TaskMonitorErrorWrapper
}

table TaskMonitorEventMessage {
  event: TaskMonitorEvent (required);
}

// Configuration Types

enum TaskShell: byte {
  None = 0,
  Auto = 1,
  Cmd = 2,      // Windows only
  Powershell = 3, // Windows only
  Bash = 4,     // Unix only
  Sh = 5,       // Unix only (POSIX shell)
  Zsh = 6,      // Unix only (Z shell)
  Fish = 7      // Unix only (Friendly interactive shell)
}

table TaskSpec {
  config: TCRM.Task.TaskConfig (required);
  shell: TaskShell = None;
  // pty: bool = false;
  dependencies: [string];
  terminate_after_dependents_finished: bool = false;
  ignore_dependencies_error: bool = false;
}

table TaskEntry {
  name: string (required);
  spec: TaskSpec (required);
}

table TcrmTasks {
  tasks: [TaskEntry];
}

root_type TcrmTasks;